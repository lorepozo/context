{ "grammar": [
    { "expr": "(B ((C substr) (-1 0)))"},
    { "expr":"((B +1) (findchar <LESS-THAN>))" } ],
  "tasks": [
    { "name":"nospaces",
      "train": [
        { "i":"no spaces", "o":"nospaces" },
        { "i":"no matter how many", "o":"nomatterhowmany" } ],
      "test": [
        { "i":"without", "o":"without"},
        { "i":"some spaces", "o":"somespaces" } ] },
    { "name":"first letters",
      "train": [
        { "i":"Marin Lorentzen", "o":"M L" } ],
      "test": [
        { "i":"Annita Nicely", "o":"A N" },
        { "i":"Joanie Faas", "o":"J F" },
        { "i":"Oma Cornelison", "o":"O C" },
        { "i":"Verlene Ottley", "o":"V O" } ] },
    { "name":"concat first letters",
      "train": [
        { "i":"Marin Lorentzen", "o":"ML" } ],
      "test": [
        { "i":"Annita Nicely", "o":"AN" },
        { "i":"Joanie Faas", "o":"JF" },
        { "i":"Oma Cornelison", "o":"OC" },
        { "i":"Verlene Ottley", "o":"VO" } ] },
    { "name":"filter cap",
      "train": [
        { "i":"Words that start With Caps", "o":"Words With Caps" } ],
      "test": [
        { "i":"thIs One IS mORE meSsY", "o":"One IS" } ] },
    { "name":"SICP",
      "train": [
        { "i":"Structure and Interpretation of Computer Programs", "o":"SICP" } ],
      "test": [
        { "i":"Principals Of Programming Languages", "o":"POPL" },
        { "i":"Neural Information Processing Systems", "o":"NIPS" },
        { "i":"International Conferences on Software Engineering", "o":"ICSE" },
        { "i":"International Conference on Functional Programming", "o":"ICFP" },
        { "i":"International Business Machines", "o":"IBM" } ] },
    { "name":"ruby -> r",
      "train": [
        { "i":"ruby", "o":"r" },
        { "i":"josh and stuff", "o":"j" } ],
      "test": [
        { "i":"just.the.first.letter", "o":"j" } ] },
    { "name":"find dot",
      "train": [
        { "i":"where is.the dot", "o":"8" } ],
      "test": [
        { "i":"an.other dot", "o":"2" } ] },
    { "name":"find less-than",
      "train": [
        { "i":"where is<the angle", "o":"8" } ],
      "test": [
        { "i":"an<other angle", "o":"2" } ] },
    { "name":"discard after dot",
      "train": [
        { "i":"discard after.dot", "o":"discard after" },
        { "i":"os.h", "o":"os" } ],
      "test": [
        { "i":"string.h", "o":"string" },
        { "i":"many words.before dot", "o":"many words" } ] },
    { "name":"drop first two chars",
      "train": [
        { "i":"drop first two chars", "o":"op first two chars" } ],
      "test":  [
        { "i":"tail", "o":"il" } ] },
    { "name":"discard before less-than",
      "train": [
        { "i":"before angle<discard", "o":"discard" } ,
        { "i":"one two three <four", "o":"four" } ],
      "test": [
        { "i":"one<two three four", "o":"two three four" } ] },
    { "name":"discard after greater-than",
      "train": [
        { "i":"discard>after angle", "o":"discard" },
        { "i":"one two> three four", "o":"one two" } ],
      "test": [
        { "i":"one two three>four", "o":"one two three" },
        { "i":"one>two three four", "o":"one" } ] },
    { "name":"#include<os.h> -> os.h",
      "train": [
        { "i":"#include <os.h>", "o":"os.h" },
        { "i":"#include <malloc.h>", "o":"malloc.h" } ],
      "test": [
        { "i":"#include<stdlib.h>", "o":"stdlib.h" },
        { "i":"#include<sys.h>", "o":"sys.h" },
        { "i":"#include<stdio.h>", "o":"stdio.h" } ] },
    { "name":"#include<os.h> -> os",
      "train": [
        { "i":"#include <os.h>", "o":"os" },
        { "i":"#include <malloc.h>", "o":"malloc" } ],
      "test": [
        { "i":"#include<stdlib.h>", "o":"stdlib" },
        { "i":"#include<sys.h>", "o":"sys" },
        { "i":"#include<stdio.h>", "o":"stdio" } ] },
    { "name":"#include<os.h> -> OS",
      "train": [
        { "i":"#include <os.h>", "o":"OS" },
        { "i":"#include <malloc.h>", "o":"MALLOC" } ],
      "test": [
        { "i":"#include<stdlib.h>", "o":"STDLIB" },
        { "i":"#include<sys.h>", "o":"SYS" },
        { "i":"#include<stdio.h>", "o":"STDIO" } ] },
  { "name":"ruby -> r",
    "train": [
      { "i":"ruby", "o":"r" },
      { "i":"josh and stuff", "o":"j" } ],
    "test": [
      { "i":"always the first letter", "o":"a" } ] },
  { "name":"find dot",
    "train": [
      { "i":"where is.the dot", "o":"8" } ],
    "test": [
      { "i":"an.other dot", "o":"2" } ] },
  { "name":"discard after @",
    "train": [
      { "i":"discard@after at", "o":"discard" } ],
    "test": [
      { "i":"one two@three four", "o":"one two" } ] },
  { "name":"discard after dot",
    "train": [
      { "i":"discard.after dot", "o":"discard" } ],
    "test": [
      { "i":"one two.three four", "o":"one two" } ] },
  { "name":"dots to spaces",
    "train": [
      { "i":"ruby.clinton", "o":"ruby clinton" },
      { "i":"matthew.jack.rosman", "o":"matthew jack rosman" } ],
    "test": [
      { "i":"brent.harold", "o":"brent harold" },
      { "i":"one.two.three.four", "o":"one two three four" } ] },
  { "name":"nospaces",
    "train": [
      { "i":"no matter how many", "o":"nomatterhowmany" } ],
    "test": [
      { "i":"no spaces", "o":"nospaces" } ] },
  { "name":"feach cap",
    "train": [
      { "i":"ruby clinton", "o":"Ruby Clinton" },
      { "i":"matthew jack rosman", "o":"Matthew Jack Rosman" } ],
    "test": [] },
  { "name":"ruby.clinton -> Ruby Clinton",
    "train": [
      { "i":"ruby.clinton", "o":"Ruby Clinton" },
      { "i":"matthew.jack.rosman", "o":"Matthew Jack Rosman" } ],
    "test": [] },
 { "name":"ruby.clinton@mit.edu -> Ruby Clinton",
   "train": [
     { "i":"ruby.clinton@mit.edu", "o":"Ruby Clinton" }, 
     { "i":"matthew.jack.rosman@yahoo.com", "o":"Matthew Jack Rosman" } ],
   "test": [
     { "i":"josh.smith@gmail.com", "o":"Josh Smith" } ] }
]}
